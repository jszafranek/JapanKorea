// Inicjalizacja mapy
let map;
let markers = [];
let routeLine;

// Wsp√≥≈Çrzƒôdne lotnisk na Cyprze
const airports = {
    larnaca: { lat: 34.8751, lng: 33.6249, name: "Lotnisko Larnaka" },
    paphos: { lat: 34.7180, lng: 32.4857, name: "Lotnisko Pafos" }
};

// Inicjalizacja po za≈Çadowaniu strony
document.addEventListener('DOMContentLoaded', function() {
    initMap();
    setupEditableFields();
    loadSavedData();
    calculateTotals();
    setupMobileFeatures();
    setupNavigation(); // Obs≈Çuga nawigacji
    loadTripPlan(); // ≈Åadowanie planu podr√≥≈ºy z JSON
});

// Inicjalizacja mapy Leaflet
function initMap() {
    // Centrum Cypru
    const cyprusCenter = { lat: 35.1264, lng: 33.4299 };
    
    // Opcje mapy dla lepszej obs≈Çugi na mobile
    const mapOptions = {
        center: [cyprusCenter.lat, cyprusCenter.lng],
        zoom: 9,
        scrollWheelZoom: false, // Wy≈ÇƒÖcz scroll zoom
        dragging: !L.Browser.mobile, // Wy≈ÇƒÖcz przeciƒÖganie na mobile poczƒÖtkowo
        tap: false // Wy≈ÇƒÖcz tap handler kt√≥ry powoduje problemy
    };
    
    map = L.map('map', mapOptions);
    
    // Dodanie warstwy mapy
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors'
    }).addTo(map);
    
    // Dodanie marker√≥w lotnisk
    const larnacaMarker = L.marker([airports.larnaca.lat, airports.larnaca.lng])
        .addTo(map)
        .bindPopup(`<strong>${airports.larnaca.name}</strong><br>Start podr√≥≈ºy<br>16.10.2025`);
    
    const paphosMarker = L.marker([airports.paphos.lat, airports.paphos.lng])
        .addTo(map)
        .bindPopup(`<strong>${airports.paphos.name}</strong><br>Koniec podr√≥≈ºy<br>27.10.2025`);
    
    markers.push(larnacaMarker, paphosMarker);
    
    // Przyk≈Çadowa trasa
    const sampleRoute = [
        [airports.larnaca.lat, airports.larnaca.lng],
        [34.9823, 33.9989], // Ajia Napa
        [35.1725, 33.3614], // Nikozja
        [34.9250, 32.8653], // Troodos
        [34.7071, 33.0226], // Limassol
        [34.8553, 32.3680], // Coral Bay
        [airports.paphos.lat, airports.paphos.lng]
    ];
    
    routeLine = L.polyline(sampleRoute, {
        color: '#0066cc',
        weight: 3,
        opacity: 0.7,
        smoothFactor: 1
    }).addTo(map);
    
    // Dodanie punkt√≥w po≈õrednich
    const waypoints = [
        { name: "Ajia Napa", lat: 34.9823, lng: 33.9989 },
        { name: "Nikozja", lat: 35.1725, lng: 33.3614 },
        { name: "G√≥ry Troodos", lat: 34.9250, lng: 32.8653 },
        { name: "Limassol", lat: 34.7071, lng: 33.0226 },
        { name: "Coral Bay", lat: 34.8553, lng: 32.3680 }
    ];
    
    waypoints.forEach(point => {
        const marker = L.circleMarker([point.lat, point.lng], {
            radius: 6,
            fillColor: "#ff9500",
            color: "#fff",
            weight: 2,
            opacity: 1,
            fillOpacity: 0.8
        }).addTo(map).bindPopup(point.name);
        markers.push(marker);
    });
    
    // Dopasowanie widoku do trasy
    map.fitBounds(routeLine.getBounds().pad(0.1));
}

// Obs≈Çuga edytowalnych p√≥l - WY≈ÅƒÑCZONA (dane sƒÖ hardcoded)
function setupEditableFields() {
    // Funkcja wy≈ÇƒÖczona - wszystkie pola sƒÖ tylko do odczytu
    // Dane sƒÖ hardcoded i nie mogƒÖ byƒá zmieniane przez u≈ºytkownika
    
    // Usuniƒôcie kursora pointer z p√≥l edytowalnych
    const editableFields = document.querySelectorAll('.editable');
    editableFields.forEach(field => {
        field.style.cursor = 'default';
        field.title = 'Pole tylko do odczytu';
    });
}

// Obliczanie sum - u≈ºywa hardcoded warto≈õci
function calculateTotals() {
    // Hardcoded warto≈õci cen
    const rentalPrice = 2500;
    const hotel1Price = 1200;
    const hotel2Price = 1500;
    const hotel3Price = 1800;
    const insurancePrice = 450;
    
    // Suma za noclegi
    const accommodationTotal = hotel1Price + hotel2Price + hotel3Price;
    
    // Aktualizuj sumy w sekcjach
    document.getElementById('rental-total').innerText = rentalPrice + ' z≈Ç';
    document.getElementById('accommodation-total').innerText = accommodationTotal + ' z≈Ç';
    document.getElementById('insurance-total').innerText = insurancePrice + ' z≈Ç';
    
    // Aktualizuj podsumowanie
    document.getElementById('summary-rental').innerText = rentalPrice + ' z≈Ç';
    document.getElementById('summary-accommodation').innerText = accommodationTotal + ' z≈Ç';
    document.getElementById('summary-insurance').innerText = insurancePrice + ' z≈Ç';
    
    // Dodatkowe koszty - hardcoded
    const foodBudget = 3000;
    const fuelBudget = 600;
    const attractionsBudget = 1500;
    
    // Suma ca≈Çkowita (loty sƒÖ sta≈Çe: 2164 z≈Ç)
    const flightsTotal = 2164;
    const grandTotal = flightsTotal + rentalPrice + accommodationTotal + insurancePrice + 
                       foodBudget + fuelBudget + attractionsBudget;
    
    document.getElementById('grand-total').innerText = grandTotal + ' z≈Ç';
    document.getElementById('per-person-total').innerText = Math.round(grandTotal / 2) + ' z≈Ç';
}

// Funkcja zapisywania danych - wy≈ÇƒÖczona (dane hardcoded)
function saveData(field, value) {
    // Funkcja wy≈ÇƒÖczona - dane sƒÖ hardcoded
}

// Wczytywanie danych - u≈ºywa hardcoded warto≈õci
function loadSavedData() {
    // Hardcoded dane podr√≥≈ºy
    const travelData = {
        'rental-price': '2500',
        'hotel-1-price': '1200',
        'hotel-2-price': '1500',
        'hotel-3-price': '1800',
        'insurance-price': '450',
        'fuel-budget': '600',
        'food-budget': '3000',
        'attractions-budget': '1500'
    };
    
    Object.keys(travelData).forEach(field => {
        if (field === 'totals') return;
        
        const element = document.querySelector(`[data-field="${field}"]`);
        if (element) {
            const value = travelData[field];
            if (value && value !== 'Do uzupe≈Çnienia' && value !== '0') {
                element.innerText = value;
                element.classList.add('filled');
                
                // Dla cen, aktualizuj r√≥wnie≈º data-price
                if (element.dataset.type === 'price') {
                    const priceTag = element.closest('.price-tag');
                    if (priceTag) {
                        priceTag.setAttribute('data-price', value);
                    }
                }
            }
        }
    });
}

// Funkcja do pokazywania/ukrywania bilet√≥w
function toggleTickets(type) {
    const ticketsDiv = document.getElementById(type + '-tickets');
    const button = event.target;
    
    if (ticketsDiv.style.display === 'none') {
        ticketsDiv.style.display = 'block';
        button.innerHTML = 'üé´ Ukryj bilety';
        button.classList.add('active');
    } else {
        ticketsDiv.style.display = 'none';
        button.innerHTML = 'üé´ Poka≈º bilety';
        button.classList.remove('active');
    }
}

// Funkcje dla przycisk√≥w akcji - Wynajem samochodu
function openRentalComparison() {
    window.open('https://www.rentalcars.com/en/city/cy/larnaca/', '_blank');
}

function openRentalContract() {
    alert('üìÑ Umowa wynajmu zostanie wygenerowana po uzupe≈Çnieniu danych');
    // Tutaj mo≈ºna dodaƒá generowanie PDF z umowƒÖ
}

function openDrivingTips() {
    window.open('https://www.visitcyprus.com/index.php/en/practical-info/driving-in-cyprus', '_blank');
}

// Funkcje dla przycisk√≥w akcji - Noclegi
function openBookingConfirmation() {
    alert('üìß Potwierdzenia rezerwacji zostanƒÖ pobrane z emaila');
    // Tutaj mo≈ºna dodaƒá funkcjƒô do wy≈õwietlania potwierdze≈Ñ
}

// Funkcje dla indywidualnych hoteli
function showHotelDetails(hotelNumber) {
    alert(`üìß Szczeg√≥≈Çy rezerwacji dla Noclegu ${hotelNumber} zostanƒÖ wy≈õwietlone`);
    // Tutaj mo≈ºna dodaƒá wy≈õwietlanie szczeg√≥≈Ç√≥w konkretnego hotelu
}

function showHotelOnMap(hotelNumber) {
    const hotelLocations = {
        1: { lat: 34.9003, lng: 33.6232, name: 'Nocleg 1 - Larnaka' },
        2: { lat: 35.1856, lng: 33.3823, name: 'Nocleg 2 - Nikozja' },
        3: { lat: 34.7720, lng: 32.4297, name: 'Nocleg 3 - Pafos' }
    };
    
    const hotel = hotelLocations[hotelNumber];
    if (hotel) {
        // Przewi≈Ñ do mapy
        document.getElementById('mapa').scrollIntoView({ behavior: 'smooth' });
        
        // Wycentruj mapƒô na hotelu
        setTimeout(() => {
            map.setView([hotel.lat, hotel.lng], 13);
            
            // Dodaj tymczasowy marker
            const tempMarker = L.marker([hotel.lat, hotel.lng])
                .addTo(map)
                .bindPopup(`<strong>${hotel.name}</strong>`)
                .openPopup();
            
            // Usu≈Ñ marker po 5 sekundach
            setTimeout(() => {
                map.removeLayer(tempMarker);
            }, 5000);
        }, 500);
    }
}

function showHotelInstructions(hotelNumber) {
    const instructions = `
    üìã INSTRUKCJE DLA NOCLEGU ${hotelNumber}
    
    CHECK-IN:
    ‚Ä¢ Godzina: od 14:00
    ‚Ä¢ Wymagane dokumenty: paszport/dow√≥d osobisty
    ‚Ä¢ Kaucja: mo≈ºe byƒá wymagana (karta kredytowa)
    
    CHECK-OUT:
    ‚Ä¢ Godzina: do 11:00
    ‚Ä¢ Zdaj klucze w recepcji
    ‚Ä¢ Sprawd≈∫ czy niczego nie zostawi≈Çe≈õ
    
    KONTAKT DO HOTELU:
    ‚Ä¢ Telefon: +357 XX XXX XXX
    ‚Ä¢ Email: hotel${hotelNumber}@example.com
    
    UDOGODNIENIA:
    ‚Ä¢ WiFi: bezp≈Çatne w ca≈Çym obiekcie
    ‚Ä¢ Parking: dostƒôpny
    ‚Ä¢ ≈öniadanie: 7:00-10:00
    
    W RAZIE PROBLEM√ìW:
    ‚Ä¢ Recepcja 24h
    ‚Ä¢ Numer alarmowy: 112
    `;
    
    alert(instructions);
    // W przysz≈Ço≈õci mo≈ºna to zastƒÖpiƒá modalem lub pobraniem PDF
}

function openHotelMap() {
    // Otw√≥rz mapƒô z zaznaczonymi hotelami
    const hotels = [
        { name: 'Hotel 1', lat: 34.9003, lng: 33.6232 },
        { name: 'Hotel 2', lat: 35.1856, lng: 33.3823 },
        { name: 'Hotel 3', lat: 34.7720, lng: 32.4297 }
    ];
    alert('üìç Lokalizacje hoteli sƒÖ widoczne na mapie poni≈ºej');
    document.getElementById('mapa').scrollIntoView({ behavior: 'smooth' });
}

function openHotelReviews() {
    window.open('https://www.tripadvisor.com/Hotels-g190372-Cyprus-Hotels.html', '_blank');
}

// Funkcje dla przycisk√≥w akcji - Ubezpieczenie
function openInsurancePolicy() {
    alert('üìã Polisa ubezpieczenia - dokument PDF zostanie pobrany');
    // Tutaj mo≈ºna dodaƒá pobieranie polisy
}

function openEmergencyContacts() {
    const contacts = `
    üÜò KONTAKTY ALARMOWE NA CYPRZE:
    
    ‚Ä¢ Pogotowie: 112 lub 199
    ‚Ä¢ Policja: 112 lub 199
    ‚Ä¢ Stra≈º po≈ºarna: 112 lub 199
    ‚Ä¢ Pomoc drogowa: 1111
    ‚Ä¢ Ambasada RP: +357 22 75 33 17
    ‚Ä¢ Generali Assistance: +48 22 522 28 60
    `;
    alert(contacts);
}

function openClaimForm() {
    window.open('https://www.generali.pl/zglos-szkode', '_blank');
}

// Funkcje dla przycisk√≥w akcji - Mapa
function openGoogleMaps() {
    // Otw√≥rz trasƒô w Google Maps
    const route = 'https://www.google.com/maps/dir/Larnaca+Airport/Ayia+Napa/Nicosia/Troodos/Limassol/Paphos+Airport';
    window.open(route, '_blank');
}

function openAttractions() {
    window.open('https://www.visitcyprus.com/index.php/en/discovercyprus/sights-monuments', '_blank');
}

function openRouteDetails() {
    const routeDetails = `
    üìç SZCZEG√ì≈ÅOWA TRASA PODR√ì≈ªY:
    
    Dzie≈Ñ 1-3: Larnaka i okolice
    ‚Ä¢ Ko≈õci√≥≈Ç ≈õw. ≈Åazarza
    ‚Ä¢ S≈Çone Jezioro
    ‚Ä¢ Pla≈ºa Finikoudes
    
    Dzie≈Ñ 4-5: Ajia Napa
    ‚Ä¢ Nissi Beach
    ‚Ä¢ Blue Lagoon
    ‚Ä¢ Cape Greco
    
    Dzie≈Ñ 6-7: Nikozja
    ‚Ä¢ Stare miasto
    ‚Ä¢ Zielona linia
    ‚Ä¢ Muzea
    
    Dzie≈Ñ 8-9: G√≥ry Troodos
    ‚Ä¢ Klasztor Kykkos
    ‚Ä¢ Wodospady
    ‚Ä¢ Wioski g√≥rskie
    
    Dzie≈Ñ 10-11: Limassol i Pafos
    ‚Ä¢ Kourion
    ‚Ä¢ Petra tou Romiou
    ‚Ä¢ Grobowce Kr√≥lewskie
    `;
    alert(routeDetails);
}

// Funkcja do prze≈ÇƒÖczania widoczno≈õci sekcji
function toggleSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section) {
        section.classList.toggle('collapsed');
    }
}

// Funkcje dla sekcji Plan Podr√≥≈ºy
function showDay(dayNumber) {
    // Ukryj wszystkie dni
    const allDays = document.querySelectorAll('.day-content');
    allDays.forEach(day => {
        day.style.display = 'none';
    });
    
    // Usu≈Ñ aktywnƒÖ klasƒô ze wszystkich przycisk√≥w
    const allButtons = document.querySelectorAll('.day-btn');
    allButtons.forEach(btn => {
        btn.classList.remove('active');
    });
    
    // Poka≈º wybrany dzie≈Ñ
    const selectedDay = document.getElementById(`day-${dayNumber}`);
    if (selectedDay) {
        selectedDay.style.display = 'block';
    }
    
    // Zaznacz aktywny przycisk
    if (allButtons[dayNumber - 1]) {
        allButtons[dayNumber - 1].classList.add('active');
    }
}

function toggleAllDays() {
    const allDays = document.querySelectorAll('.day-content');
    const button = event.target;
    
    // Sprawd≈∫ czy wszystkie dni sƒÖ widoczne
    const allVisible = Array.from(allDays).every(day => day.style.display !== 'none');
    
    if (allVisible) {
        // Poka≈º tylko pierwszy dzie≈Ñ
        allDays.forEach((day, index) => {
            day.style.display = index === 0 ? 'block' : 'none';
        });
        button.textContent = 'üìã Poka≈º ca≈Çy plan';
        
        // Aktywuj pierwszy przycisk
        showDay(1);
    } else {
        // Poka≈º wszystkie dni
        allDays.forEach(day => {
            day.style.display = 'block';
        });
        button.textContent = 'üìå Zwi≈Ñ plan';
        
        // Usu≈Ñ aktywnƒÖ klasƒô ze wszystkich przycisk√≥w
        document.querySelectorAll('.day-btn').forEach(btn => {
            btn.classList.remove('active');
        });
    }
}

// Funkcja ≈Çadowania planu podr√≥≈ºy z pliku JSON
async function loadTripPlan() {
    try {
        const response = await fetch('plajs.json');
        const data = await response.json();
        
        // Generuj HTML dla wszystkich dni
        generateAllDaysHTML(data);
        
        // Poka≈º tylko pierwszy dzie≈Ñ na starcie
        showDay(1);
    } catch (error) {
        console.error('B≈ÇƒÖd ≈Çadowania planu podr√≥≈ºy:', error);
    }
}

// Funkcja generujƒÖca HTML dla wszystkich dni
function generateAllDaysHTML(data) {
    const planSection = document.getElementById('plan-podrozy');
    if (!planSection) return;
    
    // Znajd≈∫ miejsce na dni (po nawigacji)
    const daysNavigation = planSection.querySelector('.days-navigation');
    if (!daysNavigation) return;
    
    // Usu≈Ñ istniejƒÖce dni
    const existingDays = planSection.querySelectorAll('.day-content');
    existingDays.forEach(day => day.remove());
    
    // Wygeneruj HTML dla ka≈ºdego dnia
    data.days.forEach((day) => {
        // Dodaj informacjƒô o bazie na podstawie numeru dnia
        const dayWithBase = { ...day };
        if (data.trip_info && data.trip_info.bases) {
            // Okre≈õl bazƒô na podstawie numeru dnia
            if (day.day_number >= 1 && day.day_number <= 3) {
                dayWithBase.base = "Larnaka";
            } else if (day.day_number >= 4 && day.day_number <= 5) {
                dayWithBase.base = "Troodos";
            } else if (day.day_number >= 6 && day.day_number <= 12) {
                dayWithBase.base = "Pafos";
            }
        }
        
        const dayHTML = generateDayHTML(dayWithBase);
        // Wstaw po nawigacji
        daysNavigation.insertAdjacentHTML('afterend', dayHTML);
    });
}

// Funkcja generujƒÖca HTML dla pojedynczego dnia
function generateDayHTML(day) {
    // Obs≈Çuga mieszanych typ√≥w - activity i travel
    const activities = day.activities.map(item => {
        if (item.type === 'travel') {
            return generateTravelHTML(item);
        } else {
            // Domy≈õlnie traktuj jako activity (dla kompatybilno≈õci wstecznej)
            return generateActivityHTML(item);
        }
    }).join('');
    
    return `
        <div class="day-content" id="day-${day.day_number}" style="display: none;">
            <div class="day-header">
                <h3>Dzie≈Ñ ${day.day_number} - ${day.day_name}, ${formatDate(day.date)}</h3>
                <p class="day-subtitle">${day.title}</p>
                <span class="day-theme">${day.day_theme || ''}</span>
                ${day.base ? `<span class="day-location">üìç ${day.base}</span>` : ''}
            </div>
            
            ${day.summary ? `
                <div class="day-summary">
                    ${day.summary.overview ? `
                        <div class="summary-overview">
                            <h4>üìù Podsumowanie dnia</h4>
                            <p>${day.summary.overview}</p>
                        </div>
                    ` : ''}
                    ${day.summary.logistics ? `
                        <div class="summary-logistics">
                            <h4>üöó Logistyka</h4>
                            <p>${day.summary.logistics}</p>
                        </div>
                    ` : ''}
                </div>
            ` : ''}
            
            <div class="timeline">
                ${activities}
            </div>
            
            ${generateMealsHTML(day.daily_meals || day.meals)}
        </div>
    `;
}

// Funkcja generujƒÖca HTML dla segmentu podr√≥≈ºy (travel)
function generateTravelHTML(travel) {
    const pointsOfInterest = travel.points_of_interest && travel.points_of_interest.length ? `
        <div class="travel-points-of-interest">
            <h5>üìç Warto zobaczyƒá po drodze:</h5>
            ${travel.points_of_interest.map(poi => `
                <div class="poi-item">
                    <strong>${poi.name}</strong>
                    <p>${poi.description}</p>
                </div>
            `).join('')}
        </div>
    ` : '';
    
    return `
        <div class="timeline-item timeline-travel">
            <div class="timeline-time">${travel.time}</div>
            <div class="timeline-content travel-content">
                <h4>üöó ${travel.from} ‚Üí ${travel.to}</h4>
                <div class="travel-details">
                    <span>‚è±Ô∏è ${travel.duration}</span>
                    <span class="separator">‚Ä¢</span>
                    <span>üìè ${travel.distance}</span>
                </div>
                ${travel.description ? `<p class="travel-description">${travel.description}</p>` : ''}
                ${pointsOfInterest}
            </div>
        </div>
    `;
}

// Funkcja generujƒÖca HTML dla aktywno≈õci
function generateActivityHTML(activity) {
    // U≈ºyj pierwszego tagu jako kategorii g≈Ç√≥wnej dla stylowania
    const mainCategory = activity.tags && activity.tags.length > 0 ? activity.tags[0] : '';
    const categoryClass = getCategoryClass(mainCategory);
    const tags = activity.tags ? activity.tags.map(tag => `<span class="tag-small">${tag}</span>`).join(' ') : '';
    
    const details = [];
    if (activity.location?.distance) details.push(`üìç ${activity.location.distance}`);
    if (activity.duration) details.push(`‚è±Ô∏è ${activity.duration}`);
    if (activity.details?.cost) details.push(`üé´ ${activity.details.cost}`);
    if (activity.details?.booking === 'wymagana') details.push(`üìÖ Rezerwacja wymagana`);
    
    return `
        <div class="timeline-item ${categoryClass}">
            <div class="timeline-time">${activity.time}</div>
            <div class="timeline-content">
                <h4>${getActivityIcon(mainCategory)} ${activity.title}</h4>
                <p>${activity.description}</p>
                ${tags ? `<div class="activity-tags">${tags}</div>` : ''}
                ${details.length ? `
                    <div class="activity-details">
                        ${details.join('<span class="separator"> ‚Ä¢ </span>')}
                    </div>
                ` : ''}
                ${activity.tips && activity.tips.length ? `
                    <div class="activity-tips">
                        üí° ${activity.tips[0]}
                    </div>
                ` : ''}
                ${activity.alternatives && activity.alternatives.length ? `
                    <div class="activity-alternatives">
                        <h5>üîÑ Alternatywne opcje:</h5>
                        ${activity.alternatives.map(alt => `
                            <div class="alternative-item">
                                <strong>${alt.name}</strong>
                                <p>${alt.reason}</p>
                            </div>
                        `).join('')}
                    </div>
                ` : ''}
            </div>
        </div>
    `;
}

// Funkcja generujƒÖca HTML dla posi≈Çk√≥w
function generateMealsHTML(meals) {
    if (!meals || (!meals.breakfast && !meals.lunch && !meals.dinner)) return '';
    
    const mealItems = [];
    
    // Obs≈Çuga nowej struktury z place i descrip
    if (meals.breakfast) {
        const breakfastText = meals.breakfast.descrip 
            ? `ü•ê ≈öniadanie: ${meals.breakfast.place} - ${meals.breakfast.descrip}`
            : `ü•ê ≈öniadanie: ${meals.breakfast.place || meals.breakfast}`;
        mealItems.push(breakfastText);
    }
    
    if (meals.lunch) {
        const lunchText = meals.lunch.descrip
            ? `üçΩÔ∏è Lunch: ${meals.lunch.place} - ${meals.lunch.descrip}`
            : `üçΩÔ∏è Lunch: ${meals.lunch.place || meals.lunch}${meals.lunch.cost ? ` (~${meals.lunch.cost})` : ''}`;
        mealItems.push(lunchText);
    }
    
    if (meals.dinner) {
        const dinnerText = meals.dinner.descrip
            ? `üç∑ Kolacja: ${meals.dinner.place} - ${meals.dinner.descrip}`
            : `üç∑ Kolacja: ${meals.dinner.place || meals.dinner}${meals.dinner.cost ? ` (~${meals.dinner.cost})` : ''}`;
        mealItems.push(dinnerText);
    }
    
    return `
        <div class="meals-summary">
            <h4>Posi≈Çki dnia:</h4>
            ${mealItems.map(item => `<p>${item}</p>`).join('')}
        </div>
    `;
}

// Funkcje pomocnicze
function getCategoryClass(tag) {
    const classes = {
        'zwiedzanie': 'highlight-culture',
        'aktywno≈õƒá': 'highlight-activity',
        'trekking': 'highlight-activity',
        'relaks': 'highlight-relax',
        'transport': 'highlight-transport',
        'logistyka': 'highlight-transport',
        'posi≈Çek': 'highlight-meal',
        'kuchnia lokalna': 'highlight-meal',
        'nocleg': 'highlight-accommodation',
        'historia': 'highlight-culture',
        'sztuka bizantyjska': 'highlight-culture',
        'historia staro≈ºytna': 'highlight-culture',
        'fotografia': 'highlight-culture',
        'miasto': 'highlight-culture',
        'pla≈ºa': 'highlight-relax',
        'zach√≥d s≈Ço≈Ñca': 'highlight-relax',
        'spacer': 'highlight-activity'
    };
    return classes[tag] || '';
}

function getActivityIcon(tag) {
    const icons = {
        'transport': 'üöó',
        'logistyka': 'üìã',
        'zwiedzanie': 'üèõÔ∏è',
        'aktywno≈õƒá': 'ü•æ',
        'trekking': 'ü•æ',
        'relaks': '‚òï',
        'posi≈Çek': 'üçΩÔ∏è',
        'kuchnia lokalna': 'üçΩÔ∏è',
        'nocleg': 'üè®',
        'zakupy': 'üõçÔ∏è',
        'historia': 'üèõÔ∏è',
        'sztuka bizantyjska': '‚õ™',
        'historia staro≈ºytna': 'üè∫',
        'fotografia': 'üì∏',
        'miasto': 'üèôÔ∏è',
        'pla≈ºa': 'üèñÔ∏è',
        'zach√≥d s≈Ço≈Ñca': 'üåÖ',
        'spacer': 'üö∂'
    };
    return icons[tag] || 'üìç';
}

function formatDate(dateStr) {
    const months = ['stycznia', 'lutego', 'marca', 'kwietnia', 'maja', 'czerwca',
                   'lipca', 'sierpnia', 'wrze≈õnia', 'pa≈∫dziernika', 'listopada', 'grudnia'];
    const date = new Date(dateStr);
    return `${date.getDate()} ${months[date.getMonth()]}`;
}

// Funkcja do eksportu danych - wy≈ÇƒÖczona
function exportData() {
    // Funkcja wy≈ÇƒÖczona - dane sƒÖ hardcoded
    alert('Eksport danych zosta≈Ç wy≈ÇƒÖczony - wszystkie dane sƒÖ hardcoded');
}

// Funkcja do importu danych - wy≈ÇƒÖczona
function importData(file) {
    // Funkcja wy≈ÇƒÖczona - dane sƒÖ hardcoded
    alert('Import danych zosta≈Ç wy≈ÇƒÖczony - wszystkie dane sƒÖ hardcoded');
}

// Funkcja obs≈Çugi nawigacji
function setupNavigation() {
    const sections = document.querySelectorAll('section');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav a');
    const desktopNavLinks = document.querySelectorAll('.desktop-nav .nav-item');
    
    // Obs≈Çuga aktywnej sekcji podczas scrollowania
    window.addEventListener('scroll', () => {
        let current = '';
        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.clientHeight;
            if (scrollY >= (sectionTop - 200)) {
                current = section.getAttribute('id');
            }
        });
        
        // Update mobile nav
        mobileNavLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') && link.getAttribute('href').substring(1) === current) {
                link.classList.add('active');
            }
        });
        
        // Update desktop nav
        desktopNavLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') && link.getAttribute('href').substring(1) === current) {
                link.classList.add('active');
            }
        });
    });
    
    // Smooth scrolling z uwzglƒôdnieniem wysoko≈õci nawigacji
    document.querySelectorAll('.desktop-nav a, .mobile-nav a').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                const headerHeight = document.querySelector('header').offsetHeight;
                const navHeight = window.innerWidth > 768 ? 
                    (document.querySelector('.desktop-nav') ? document.querySelector('.desktop-nav').offsetHeight : 0) :
                    (document.querySelector('.mobile-nav') ? document.querySelector('.mobile-nav').offsetHeight : 0);
                const elementPosition = target.getBoundingClientRect().top;
                const offsetPosition = elementPosition + window.pageYOffset - navHeight - 10;
                window.scrollTo({
                    top: offsetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });
}

// Funkcje dla urzƒÖdze≈Ñ mobilnych
function setupMobileFeatures() {
    // Smooth scrolling dla link√≥w nawigacji
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                const headerHeight = document.querySelector('header').offsetHeight;
                const elementPosition = target.getBoundingClientRect().top;
                const offsetPosition = elementPosition + window.pageYOffset - headerHeight - 10;

                window.scrollTo({
                    top: offsetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });

    // Lepsze do≈õwiadczenie edycji na mobile
    if ('ontouchstart' in window) {
        document.querySelectorAll('.editable').forEach(field => {
            field.addEventListener('touchstart', function(e) {
                e.preventDefault();
                this.click();
            });
        });
    }

    // Zapobieganie zoom przy double tap
    let lastTouchEnd = 0;
    document.addEventListener('touchend', function (e) {
        const now = Date.now();
        if (now - lastTouchEnd <= 300) {
            e.preventDefault();
        }
        lastTouchEnd = now;
    }, false);

    // Dostosowanie mapy dla mobile
    if (window.innerWidth <= 768) {
        map.setZoom(8);
        
        // W≈ÇƒÖcz kontrolkƒô fullscreen dla mobile
        addMapControls();
    }
    
    // Obs≈Çuga klikniƒôcia w mapƒô - w≈ÇƒÖcz/wy≈ÇƒÖcz interakcjƒô
    const mapContainer = document.getElementById('map');
    let mapFocused = false;
    
    mapContainer.addEventListener('click', function() {
        if (!mapFocused) {
            map.dragging.enable();
            map.scrollWheelZoom.enable();
            mapContainer.style.border = '2px solid var(--primary-color)';
            mapFocused = true;
        }
    });
    
    // Wy≈ÇƒÖcz interakcjƒô gdy klikniemy poza mapƒÖ
    document.addEventListener('click', function(e) {
        if (!mapContainer.contains(e.target) && mapFocused) {
            map.dragging.disable();
            map.scrollWheelZoom.disable();
            mapContainer.style.border = '2px solid var(--border-color)';
            mapFocused = false;
        }
    });

    // Aktywna sekcja w nawigacji
    const observerOptions = {
        root: null,
        rootMargin: '-20% 0px -70% 0px',
        threshold: 0
    };

    const observerCallback = (entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const id = entry.target.getAttribute('id');
                document.querySelectorAll('.mobile-nav a').forEach(link => {
                    link.classList.remove('active');
                    if (link.getAttribute('href') === `#${id}`) {
                        link.classList.add('active');
                    }
                });
            }
        });
    };

    const observer = new IntersectionObserver(observerCallback, observerOptions);
    document.querySelectorAll('.section').forEach(section => {
        observer.observe(section);
    });
}

// Dodaj kontrolki do mapy
function addMapControls() {
    // Przycisk do centrowania mapy
    const centerButton = L.control({position: 'topright'});
    
    centerButton.onAdd = function() {
        const div = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
        div.innerHTML = '<a href="#" style="width: 30px; height: 30px; line-height: 30px; text-align: center;">üéØ</a>';
        
        div.onclick = function(e) {
            e.preventDefault();
            map.fitBounds(routeLine.getBounds().pad(0.1));
            return false;
        };
        
        return div;
    };
    
    centerButton.addTo(map);
}